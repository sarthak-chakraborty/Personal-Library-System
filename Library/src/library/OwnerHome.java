/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.util.*;


/**
 *
 * @author USER
 */
public class OwnerHome extends javax.swing.JFrame {
    String name;
    static int shelfvar = 1;
    private int flag;
    /**
     * Creates new form OwnerHome1
     */
    public OwnerHome(String name) {
        this.name = name;
        initComponents();
        java.util.Date date = new java.util.Date();
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        jLabel8.setText(dateFormat.format(date).toString());
        show_header();
        flag = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchResultArea = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        bookSearch = new javax.swing.JButton();
        bookAdd = new javax.swing.JButton();
        bookRemove = new javax.swing.JButton();
        bookCheckAvail = new javax.swing.JButton();
        bookIssue = new javax.swing.JButton();
        complaints = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        accntResult = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bookName = new javax.swing.JTextField();
        bookAuthor = new javax.swing.JTextField();
        bookGenre = new javax.swing.JTextField();
        bookPubYear = new javax.swing.JTextField();
        bookPubHouse = new javax.swing.JTextField();
        bookPrice = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        ownerCombo = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        accntBookName = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        header = new javax.swing.JLabel();
        ownerLogout = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        chngPass = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4), "Search Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));

        searchResultArea.setColumns(20);
        searchResultArea.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        searchResultArea.setRows(5);
        jScrollPane1.setViewportView(searchResultArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(0, 102, 102));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4), "Action", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(255, 255, 255));

        bookSearch.setBackground(new java.awt.Color(0, 153, 255));
        bookSearch.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookSearch.setForeground(new java.awt.Color(255, 255, 255));
        bookSearch.setText("Search Book");
        bookSearch.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(255, 51, 51), new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0)));
        bookSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSearchActionPerformed(evt);
            }
        });

        bookAdd.setBackground(new java.awt.Color(0, 153, 255));
        bookAdd.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookAdd.setForeground(new java.awt.Color(255, 255, 255));
        bookAdd.setText("Add Book");
        bookAdd.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(0, 153, 153), new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0)));
        bookAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookAddActionPerformed(evt);
            }
        });

        bookRemove.setBackground(new java.awt.Color(0, 153, 255));
        bookRemove.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookRemove.setForeground(new java.awt.Color(255, 255, 255));
        bookRemove.setText("Remove Book");
        bookRemove.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(0, 153, 153), new java.awt.Color(51, 51, 51), java.awt.Color.black));
        bookRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookRemoveActionPerformed(evt);
            }
        });

        bookCheckAvail.setBackground(new java.awt.Color(0, 153, 255));
        bookCheckAvail.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookCheckAvail.setForeground(new java.awt.Color(255, 255, 255));
        bookCheckAvail.setText("Check Availability");
        bookCheckAvail.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(0, 153, 153), new java.awt.Color(51, 51, 51), java.awt.Color.black));
        bookCheckAvail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookCheckAvailActionPerformed(evt);
            }
        });

        bookIssue.setBackground(new java.awt.Color(0, 153, 255));
        bookIssue.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        bookIssue.setForeground(new java.awt.Color(255, 255, 255));
        bookIssue.setText("Issue Book");
        bookIssue.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(0, 153, 153), new java.awt.Color(51, 51, 51), java.awt.Color.black));
        bookIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookIssueActionPerformed(evt);
            }
        });

        complaints.setBackground(new java.awt.Color(0, 153, 255));
        complaints.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        complaints.setForeground(new java.awt.Color(255, 255, 255));
        complaints.setText("View Complaints");
        complaints.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(0, 153, 153), new java.awt.Color(51, 51, 51), java.awt.Color.black));
        complaints.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                complaintsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(bookAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookCheckAvail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(complaints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(bookIssue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(bookSearch)
                .addGap(18, 18, 18)
                .addComponent(bookAdd)
                .addGap(18, 18, 18)
                .addComponent(bookRemove)
                .addGap(18, 18, 18)
                .addComponent(bookCheckAvail)
                .addGap(18, 18, 18)
                .addComponent(bookIssue)
                .addGap(18, 18, 18)
                .addComponent(complaints)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(0, 102, 102));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4), "Account Results", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N

        accntResult.setColumns(20);
        accntResult.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        accntResult.setRows(5);
        jScrollPane2.setViewportView(accntResult);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4), "Enter Book Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Author:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Genre:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Publication Year:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Publication House:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Price (Rs.):");

        bookName.setBackground(new java.awt.Color(153, 153, 153));
        bookName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookName.setForeground(new java.awt.Color(255, 255, 255));
        bookName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        bookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookNameActionPerformed(evt);
            }
        });

        bookAuthor.setBackground(new java.awt.Color(153, 153, 153));
        bookAuthor.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookAuthor.setForeground(new java.awt.Color(255, 255, 255));
        bookAuthor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookGenre.setBackground(new java.awt.Color(153, 153, 153));
        bookGenre.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookGenre.setForeground(new java.awt.Color(255, 255, 255));
        bookGenre.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookPubYear.setBackground(new java.awt.Color(153, 153, 153));
        bookPubYear.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookPubYear.setForeground(new java.awt.Color(255, 255, 255));
        bookPubYear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookPubHouse.setBackground(new java.awt.Color(153, 153, 153));
        bookPubHouse.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookPubHouse.setForeground(new java.awt.Color(255, 255, 255));
        bookPubHouse.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        bookPrice.setBackground(new java.awt.Color(153, 153, 153));
        bookPrice.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        bookPrice.setForeground(new java.awt.Color(255, 255, 255));
        bookPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(28, 28, 28)
                        .addComponent(bookPrice))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(10, 10, 10)
                        .addComponent(bookPubHouse))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(25, 25, 25)
                        .addComponent(bookPubYear))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(bookGenre))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(10, 10, 10)
                        .addComponent(bookAuthor))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(35, 35, 35))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(bookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(bookAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(bookGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(bookPubYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(bookPubHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel6))
                    .addComponent(bookPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(0, 102, 102));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 4), "Account Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 255, 255))); // NOI18N

        ownerCombo.setBackground(new java.awt.Color(102, 102, 102));
        ownerCombo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ownerCombo.setForeground(new java.awt.Color(255, 255, 255));
        ownerCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Own Account", "Friend's Account", "Delete User", "View All Books", "Check Due Date", "Check Book Holder" }));
        ownerCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownerComboActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Book :");

        accntBookName.setBackground(new java.awt.Color(153, 153, 153));
        accntBookName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        accntBookName.setForeground(new java.awt.Color(255, 255, 255));
        accntBookName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        accntBookName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accntBookNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(ownerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 80, Short.MAX_VALUE))
                    .addComponent(accntBookName))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ownerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(accntBookName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 102, 0));

        header.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        header.setText("WELCOME !!");

        ownerLogout.setBackground(new java.awt.Color(204, 51, 0));
        ownerLogout.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ownerLogout.setForeground(new java.awt.Color(255, 255, 255));
        ownerLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/close.png"))); // NOI18N
        ownerLogout.setText("Logout");
        ownerLogout.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.white, java.awt.Color.gray, java.awt.Color.darkGray));
        ownerLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ownerLogoutActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        chngPass.setBackground(new java.awt.Color(0, 153, 204));
        chngPass.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        chngPass.setForeground(new java.awt.Color(255, 255, 255));
        chngPass.setText("Change Password");
        chngPass.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, new java.awt.Color(255, 51, 51), new java.awt.Color(51, 51, 51), java.awt.Color.black));
        chngPass.setPreferredSize(new java.awt.Dimension(171, 29));
        chngPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chngPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(167, 167, 167)
                        .addComponent(header)))
                .addGap(0, 0, 0)
                .addComponent(chngPass, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ownerLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(header)
                            .addComponent(ownerLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chngPass, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel8))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void show_header(){
        Connection conn = null;
        
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            String query = "Select * from owner;";
            PreparedStatement st = conn.prepareStatement(query);
            ResultSet rs = st.executeQuery();
            rs.next();
            header.setText("WELCOME " + rs.getString("name").toUpperCase() + " !");
           
            conn.close();
        }
        catch(Exception e){
            System.err.println(e);
        }
    }
    
    public int getflag(){
        return this.flag;
    }
    
    public void setDetails(String book, String author, String genre, int pubyear, String pubhouse, double price){
        bookName.setText(book);
        bookAuthor.setText(author);
        bookGenre.setText(genre);
        bookPubYear.setText(Integer.toString(pubyear));
        bookPubHouse.setText(pubhouse);
        bookPrice.setText(Double.toString(price));
    }
    
    public void addBookClick(){
        ActionEvent e = null;
        bookAddActionPerformed(e);
    }
    
    public void removeBookClick(){
        ActionEvent e = null;
        bookRemoveActionPerformed(e);
    }
    
    public void searchBookClick(){
        ActionEvent e = null;
        bookSearchActionPerformed(e);
    }
    
    private void ownerLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownerLogoutActionPerformed
        this.dispose();
    }//GEN-LAST:event_ownerLogoutActionPerformed

    private void bookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bookNameActionPerformed

    private void bookSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSearchActionPerformed
        Connection conn = null;
        
        try{
            searchResultArea.setText(null);
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            String bookname = bookName.getText();
            String bookauthor = bookAuthor.getText();
            String bookgenre = bookGenre.getText();
            String bookyears = bookPubYear.getText();
            String bookpub = bookPubHouse.getText();
            String bookprices = bookPrice.getText();
            int bookyear; double bookprice;
            if(bookyears.equals(""))
                bookyear = -1;
            else
                bookyear = Integer.parseInt(bookyears);
            
            if(bookprices.equals(""))
                bookprice = -1.0;
            else
                bookprice = Double.parseDouble(bookprices);
            
            if((bookyear >= 0  || bookprice >= 0.0) || (bookyears.equals("") && bookprices.equals(""))){
                    String str = "";
                    if(!bookname.equals(""))
                        str = str + "book_name=" + "\'" + bookname + "\'";
                    if(!bookauthor.equals("")){
                        if(str.equals(""))
                            str = str + "book_author=" + "\'" + bookauthor + "\'";
                        else
                            str = str + " and book_author=" + "\'" + bookauthor + "\'";
                    }
                    if(!bookgenre.equals("")){
                        if(str.equals(""))
                            str = str + "book_genre=" + "\'" + bookgenre + "\'";
                        else
                            str = str + " and book_genre=" + "\'" + bookgenre + "\'";
                    }
                    if(!bookpub.equals("")){
                        if(str.equals(""))
                            str = str + "book_pub=" + "\'" + bookpub + "\'";
                        else
                            str = str + " and book_pub=" + "\'" + bookpub + "\'";
                    }
                    if(bookyear != -1){
                        if(str.equals(""))
                            str = str + "book_year=" + bookyear;
                        else
                            str = str + " and book_year=" + bookyear;
                    }
                    if(bookprice != -1.0){
                        if(str.equals(""))
                            str = str + "book_price=" + bookprice;
                        else
                            str = str + " and book_price=" + bookprice;
                    }
                    String query = "Select * from book where " + str + ";"; 
                    PreparedStatement st = conn.prepareStatement(query);
                    ResultSet rs = st.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null,
                            "No such Result found. Try again.",
                            "Search Failed",
                            JOptionPane.ERROR_MESSAGE);
                        bookName.setText(null);
                        bookAuthor.setText(null);
                        bookGenre.setText(null);
                        bookPubYear.setText(null);
                        bookPubHouse.setText(null);
                        bookPrice.setText(null);
                    }
                    rs.beforeFirst();
                    searchResultArea.append("\t   Library\n ==============================\n\n");
                    while(rs.next()){
                        int bid = rs.getInt("book_id");
                        String bname = rs.getString("book_name");
                        String bauthor = rs.getString("book_author");
                        String bgenre = rs.getString("book_genre");
                        int byear = rs.getInt("book_year");
                        String bpub = rs.getString("book_pub");
                        double bprice = rs.getDouble("book_price");
                        int bshelf = rs.getInt("shelf");
                        
                        searchResultArea.append(" Book: " + bname + "\n Author: " + bauthor
                        + "\n Book id: " + bid + "\n Genre: " + bgenre + "\n Publishing Year: " + byear + "\n Publisher: "
                        + bpub + "\n Shelf: " + bshelf + "\n ==============================\n\n");
                        
                        flag = 1;
                        
                    } 
                    
                    conn.close();
                    bookName.setText(null);
                    bookAuthor.setText(null);
                    bookGenre.setText(null);
                    bookPubYear.setText(null);
                    bookPubHouse.setText(null);
                    bookPrice.setText(null);
                    
            }
            else{
                JOptionPane.showMessageDialog(null,
                    "Enter Valid Pub. Year / Book Price",
                    "Add Book Failed",
                    JOptionPane.ERROR_MESSAGE);
            }  
        }catch(Exception e){
            System.err.println(e);
        }
       
    }//GEN-LAST:event_bookSearchActionPerformed

    private void bookAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookAddActionPerformed
        Connection conn = null;
        
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            String bookname = bookName.getText();
            String bookauthor = bookAuthor.getText();
            String bookgenre = bookGenre.getText();
            String bookyears = bookPubYear.getText();
            String bookpub = bookPubHouse.getText();
            String bookprices = bookPrice.getText();
            int bookyear; double bookprice;
            if(bookyears.equals(""))
                bookyear = -1;
            else
                bookyear = Integer.parseInt(bookyears);
            
            if(bookprices.equals(""))
                bookprice = -1.0;
            else
                bookprice = Double.parseDouble(bookprices);
            
            if((bookyear >= 0  || bookprice >= 0.0) || (bookyears.equals("") && bookprices.equals(""))){
                if(bookname.equals("")){
                    JOptionPane.showMessageDialog(null,
                        "Enter Book Name to Add",
                        "Add Book Failed",
                        JOptionPane.ERROR_MESSAGE);
                }
                else{
                    String query = "Insert into book (book_name, book_author, book_genre, book_year, book_pub, book_price, shelf)"
                            + "values(?,?,?,?,?,?,?);";
                     
                    PreparedStatement preparedStmt = conn.prepareStatement(query);
                    preparedStmt.setString (1, bookname);
                    preparedStmt.setString (2, bookauthor);
                    preparedStmt.setString (3, bookgenre);
                    preparedStmt.setInt(4, bookyear);
                    preparedStmt.setString(5, bookpub);
                    preparedStmt.setDouble(6, bookprice);
                    preparedStmt.setInt(7, 0);
                    preparedStmt.execute();
                    String query1 = "Select book_id from book where book_name=?;";
                    PreparedStatement stmt = conn.prepareStatement(query1);
                    stmt.setString(1, bookname);
                    ResultSet rs = stmt.executeQuery();
                    
                    if(rs.next()){
                        int id = rs.getInt("book_id");
                        shelfvar += (id - 1) / 10;
                        query1 = "Update book set shelf=?;";
                        PreparedStatement st = conn.prepareStatement(query1);
                        st.setInt(1, shelfvar);
                        st.executeUpdate();
                    }
                    
                    conn.close();
                    JOptionPane.showMessageDialog(null, "Adding Book Successul");
                    bookName.setText(null);
                    bookAuthor.setText(null);
                    bookGenre.setText(null);
                    bookPubYear.setText(null);
                    bookPubHouse.setText(null);
                    bookPrice.setText(null);
                    
                }
            }
            else{
                JOptionPane.showMessageDialog(null,
                    "Enter Valid Pub. Year / Book Price",
                    "Add Book Failed",
                    JOptionPane.ERROR_MESSAGE);
            }  
        }catch(Exception e){
            System.err.println(e);
        }
    }//GEN-LAST:event_bookAddActionPerformed

    private void bookRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookRemoveActionPerformed
        Connection conn = null;
        
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            String bookname = bookName.getText();
            String bookauthor = bookAuthor.getText();
            String bookgenre = bookGenre.getText();
            String bookyears = bookPubYear.getText();
            String bookpub = bookPubHouse.getText();
            String bookprices = bookPrice.getText();
            int bookyear; double bookprice;
            if(bookyears.equals(""))
                bookyear = -1;
            else
                bookyear = Integer.parseInt(bookyears);
            
            if(bookprices.equals(""))
                bookprice = -1.0;
            else
                bookprice = Double.parseDouble(bookprices);
            
            if((bookyear >= 0  || bookprice >= 0.0) || (bookyears.equals("") && bookprices.equals(""))){
                if(bookname.equals("")){
                    JOptionPane.showMessageDialog(null,
                        "Enter Book Name to Remove",
                        "Remove Book Failed",
                        JOptionPane.ERROR_MESSAGE);
                }
                else{
                    
                    String query = "Delete from book where book_name=?;";
                    
                    PreparedStatement preparedStmt = conn.prepareStatement(query);
                    preparedStmt.setString (1, bookname);
                    preparedStmt.executeUpdate();
                    
                    conn.close();
                    JOptionPane.showMessageDialog(null, "Removing Book Successful");
                    bookName.setText(null);
                    bookAuthor.setText(null);
                    bookGenre.setText(null);
                    bookPubYear.setText(null);
                    bookPubHouse.setText(null);
                    bookPrice.setText(null);
                    
                }
            }
            else{
                JOptionPane.showMessageDialog(null,
                    "Enter Valid Pub. Year / Book Price",
                    "Add Book Failed",
                    JOptionPane.ERROR_MESSAGE);
            }  
        }catch(Exception e){
            System.err.println(e);
        }
    }//GEN-LAST:event_bookRemoveActionPerformed

    private void bookCheckAvailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookCheckAvailActionPerformed
         Connection conn = null;
        
        try{
            searchResultArea.setText(null);
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            String bookname = bookName.getText();
            String bookauthor = bookAuthor.getText();
            String bookgenre = bookGenre.getText();
            String bookyears = bookPubYear.getText();
            String bookpub = bookPubHouse.getText();
            String bookprices = bookPrice.getText();
            int bookyear; double bookprice;
            if(bookyears.equals(""))
                bookyear = -1;
            else
                bookyear = Integer.parseInt(bookyears);
            
            if(bookprices.equals(""))
                bookprice = -1.0;
            else
                bookprice = Double.parseDouble(bookprices);
            
            if((bookyear >= 0  || bookprice >= 0.0) || (bookyears.equals("") && bookprices.equals(""))){
                    String str = "";
                    if(!bookname.equals(""))
                        str = str + "book_name=" + "\'" + bookname + "\'";
                    if(!bookauthor.equals("")){
                        if(str.equals(""))
                            str = str + "book_author=" + "\'" + bookauthor + "\'";
                        else
                            str = str + "and book_author=" + "\'" + bookauthor + "\'";
                    }
                    if(!bookgenre.equals("")){
                        if(str.equals(""))
                            str = str + "book_genre=" + "\'" + bookgenre + "\'";
                        else
                            str = str + "and book_genre=" + "\'" + bookgenre + "\'";
                    }
                    if(!bookpub.equals("")){
                        if(str.equals(""))
                            str = str + "book_pub=" + "\'" + bookpub + "\'";
                        else
                            str = str + "and book_pub=" + "\'" + bookpub + "\'";
                    }
                    if(bookyear != -1){
                        if(str.equals(""))
                            str = str + "book_year=" + bookyear;
                        else
                            str = str + "and book_year=" + bookyear;
                    }
                    if(bookprice != -1.0){
                        if(str.equals(""))
                            str = str + "book_price=" + bookprice;
                        else
                            str = str + "and book_price=" + bookprice;
                    }
                    String query = "Select * from book where " + str + ";";
                     
                    PreparedStatement st = conn.prepareStatement(query);
                    ResultSet rs = st.executeQuery();
                    if(!rs.next()){
                        searchResultArea.append(" Sorry.\n Book having the entered fields\n"
                                + " are not available.\n");
                        bookName.setText(null);
                        bookAuthor.setText(null);
                        bookGenre.setText(null);
                        bookPubYear.setText(null);
                        bookPubHouse.setText(null);
                        bookPrice.setText(null);
                    }
                    else{
                    rs.beforeFirst();
                    searchResultArea.append("\t   Library\n"
                            + " Book having the entered field \n is avialable\n ==============================\n\n");
                    while(rs.next()){
                        int bid = rs.getInt("book_id");
                        String bname = rs.getString("book_name");
                        String bauthor = rs.getString("book_author");
                        int bshelf = rs.getInt("shelf");
                        
                        searchResultArea.append(" Book: " + bname + "\n Author: " + bauthor
                        + "\n Book id: " + bid + "\n Shelf: " + bshelf + "\n ==============================\n\n");
                        
                    }                  
                    
                    conn.close();
                    bookName.setText(null);
                    bookAuthor.setText(null);
                    bookGenre.setText(null);
                    bookPubYear.setText(null);
                    bookPubHouse.setText(null);
                    bookPrice.setText(null);
                    }
            }
            else{
                JOptionPane.showMessageDialog(null,
                    "Enter Valid Pub. Year / Book Price",
                    "Add Book Failed",
                    JOptionPane.ERROR_MESSAGE);
            }  
        }catch(Exception e){
            System.err.println(e);
        }
    }//GEN-LAST:event_bookCheckAvailActionPerformed

    private void bookIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookIssueActionPerformed
        Issue obj = new Issue();
        obj.setVisible(true);
    }//GEN-LAST:event_bookIssueActionPerformed

    private void complaintsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_complaintsActionPerformed
        ViewComplaint obj = new ViewComplaint();
        obj.setVisible(true);
    }//GEN-LAST:event_complaintsActionPerformed

    private void ownerComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ownerComboActionPerformed
        Connection conn = null;
        
        try{
            String myDriver = "org.gjt.mm.mysql.Driver";
            Class.forName(myDriver);
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/library","root","Srth#hak1715");
            if(ownerCombo.getSelectedItem().equals("Own Account")){
                accntResult.setText(null);
                accntResult.append("\t    Your Account\n======================================\n");
                String query = "Select * from owner where user = \'"+name+"\';";
                PreparedStatement st = conn.prepareStatement(query);
                ResultSet rs = st.executeQuery();
                rs.next();
                String uname = rs.getString("name");
                System.out.println(uname);
                String user = rs.getString("user");
                String mail = rs.getString("mail");
                accntResult.append(" Name: " + uname + "\n Username: " + user + "\n Mail: " + mail + "\n======================================\n");
                query = "Select * from book;";
                st = conn.prepareStatement(query);
                rs = st.executeQuery();
                if(!rs.next()){
                  accntResult.append(" You have no books in the \n library.\n======================================\n");  
                }
                else{
                    int c = 0;
                    rs.beforeFirst();
                    while(rs.next()){
                        c++;
                    }
                    accntResult.append(" You have " + c + " books in your account.\n======================================\n");
                }
                accntResult.append(" Friends registered in your library:\n");
                query = "Select * from friend;";
                st = conn.prepareStatement(query);
                rs = st.executeQuery();
                if(!rs.next()){
                  accntResult.append(" None.\n======================================\n");  
                }
                else{
                    rs.beforeFirst();
                    while(rs.next()){
                        accntResult.append(" Name: " + rs.getString("name") + "\n Username: " + rs.getString("user")
                         + "\n Account No: " + rs.getInt("accnt_no") + "\n Mail: " + rs.getString("mail") + "\n Phone: "
                          + rs.getString("phone") + "\n\n");
                    }
                    accntResult.append("======================================\n\n");
                }
            }
            else if(ownerCombo.getSelectedItem().equals("Friend's Account")){
                accntResult.setText(null);
                accntResult.append("     Friend's Account Information\n======================================\n");
                String query = "Select * from friend;";
                PreparedStatement st = conn.prepareStatement(query);
                ResultSet rs = st.executeQuery();
                if(!rs.next()){
                    accntResult.append(" No friend have registered\n in your library.\n======================================\n\n");
                }
                else{
                    rs.beforeFirst();
                    while(rs.next()){
                        String user = rs.getString("user");
                        accntResult.append(" Name: " + rs.getString("name") + "\n Username: " + user
                        + "\n Account No: " + rs.getInt("accnt_no") + "\n");
                        query = "Select * from frnd_accnt where user = \'"+user+"\';";
                        st = conn.prepareStatement(query);
                        ResultSet r = st.executeQuery();
                        if(!r.next()){
                            accntResult.append(" No issued books.\n======================================\n\n");
                        }
                        r.beforeFirst();
                        while(r.next()){
                            accntResult.append(" Book Issued: " + r.getString("book_issued") + "\n Due Date: " + r.getDate("due_date")
                            + "\n======================================\n\n");
                        }
                    }
                }
            }
            else if(ownerCombo.getSelectedItem().equals("Check Due Date")){
                accntResult.setText(null);
                String book =  accntBookName.getText();
                if(book.equals("")){
                    JOptionPane.showMessageDialog(null,
                       "Enter a book name and then select the item.");
                }
                else{
                    String query = "Select * from frnd_accnt where book_issued = \'"+book+"\';";
                    PreparedStatement st = conn.prepareStatement(query);
                    ResultSet rs = st.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "No book of such name has been issued.");
                    }
                    else{
                        rs.beforeFirst();
                        while(rs.next()){
                            String user = rs.getString("user");
                            query = "Select * from friend where user = \'" + user + "\';";
                            st = conn.prepareStatement(query);
                            ResultSet r = st.executeQuery();
                            r.next();
                            accntResult.append(" Book: " + rs.getString("book_issued") + "\n Issued By: " + r.getString("name")
                            + "\n Due Date: " + rs.getDate("due_date") + "\n======================================\n");
                        }
                    }
                }
            }
            else if(ownerCombo.getSelectedItem().equals("Check Book Holder")){
                accntResult.setText(null);
                String book =  accntBookName.getText();
                if(book.equals("")){
                    JOptionPane.showMessageDialog(null,
                       "Enter a book name and then select the item.");
                }
                else{
                    String query = "Select * from frnd_accnt where book_issued = \'" + book + "\';";
                    PreparedStatement st = conn.prepareStatement(query);
                    ResultSet rs = st.executeQuery();
                    if(!rs.next()){
                        JOptionPane.showMessageDialog(null, "No book has been issued.");
                    }
                    else{
                        rs.beforeFirst();
                        while(rs.next()){
                            String user = rs.getString("user");
                            query = "Select * from friend where user = \'" + user + "\';";
                            st = conn.prepareStatement(query);
                            ResultSet r = st.executeQuery();
                            r.next();
                            accntResult.append(" Book: " + rs.getString("book_issued") + "\n Issued By: " + r.getString("name")
                            + "\n======================================\n");
                        }
                    }
                }
            }
            else if(ownerCombo.getSelectedItem().equals("View All Books")){
                ViewBooks obj = new ViewBooks();
                obj.setVisible(true);
            }
            else{
                accntResult.setText(null);
                String user = JOptionPane.showInputDialog(null, "Enter friend's username");
                String query = "Select * from friend where user = \'"+user+"\';";
                PreparedStatement st = conn.prepareStatement(query);
                ResultSet rs = st.executeQuery();
                if(!rs.next()){
                    JOptionPane.showMessageDialog(null, "No friend by the entered username.");
                }
                else{
                    DeleteUser obj = new DeleteUser(user);
                    obj.setVisible(true);
                }
            }
            conn.close();
        }
        catch(Exception e){
            System.err.println(e);
        }
    }//GEN-LAST:event_ownerComboActionPerformed

    private void accntBookNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accntBookNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accntBookNameActionPerformed

    private void chngPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chngPassActionPerformed
        changePassword obj = new changePassword("Owner", name);
        obj.setVisible(true);
    }//GEN-LAST:event_chngPassActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OwnerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OwnerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OwnerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OwnerHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OwnerHome(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField accntBookName;
    private javax.swing.JTextArea accntResult;
    private javax.swing.JButton bookAdd;
    private javax.swing.JTextField bookAuthor;
    private javax.swing.JButton bookCheckAvail;
    private javax.swing.JTextField bookGenre;
    private javax.swing.JButton bookIssue;
    private javax.swing.JTextField bookName;
    private javax.swing.JTextField bookPrice;
    private javax.swing.JTextField bookPubHouse;
    private javax.swing.JTextField bookPubYear;
    private javax.swing.JButton bookRemove;
    private javax.swing.JButton bookSearch;
    private javax.swing.JButton chngPass;
    private javax.swing.JButton complaints;
    private javax.swing.JLabel header;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> ownerCombo;
    private javax.swing.JButton ownerLogout;
    private javax.swing.JTextArea searchResultArea;
    // End of variables declaration//GEN-END:variables
}
